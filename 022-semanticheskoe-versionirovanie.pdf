### 22\. Семантическое версионирование

Концепция семантического версионирования очень проста: все версии имеют три цифры: x.y.z:

* первая цифра - основная (главная, мажорная) версия
* вторая цифра - второстепенная (минорная) версия
* третья цифра - патч (патчевая версия)

Когда вы делаете новый релиз, вы не присваиваете версию как вам хочется, но следуете определенным правилам:

* вы увеличиваете мажорную версию при внесении в интерфейс несовместимых с предыдущей версией изменений
* вы увеличиваете минорную версию при добавлении функционала, совместимого с предыдущей версией
* вы увеличиваете патчевую версию при исправлении ошибок

Правила семантического версионирования едины для всех языков программирования, очень важно, чтобы каждый пакет в npm следовал этим правилам, поскольку на этом основана вся система. 

Почему это так важно? 

Потому что в package.json мы определяем правила или условия обновления, т.е. какие версии являются приемлемыми при выполнении npm update. 

В качестве спецификаторов используются следующие символы:

* ^
* ~
* \>
* \>=
* <
* <=
* =
* -
* ||

Рассмотрим их подробнее:

* ^: если указано ^0.13.0, значит, допустимы патчевые и минорные релизы: 0.13.1, 0.14.0 и т.д.
* ~: если указано ~0.13.0, значит, допустимы только патчевые релизы: 0.13.1 подойдет, а 0.14.0 нет.
* \>: допустимы любые новые версии
* \>=: допустимы аналогичная или новые версии
* <=: допустимы аналогичная или старые версии
* <: допустимы любые старые версии
* =: допустима только указанная версия
* -: допустим диапазон версий. Например: 2.1.0-2.6.2
* ||: допустима комбинация версий. Например: < 2.1 || \> 2.6

Спецификаторы можно комбинировать, например: 1.0.0 || \>= 1.1.0 < 1.2.0 - допустима указанная версия или диапазон между версиями 1.1.0 и 1.2.0 (не включая последнюю). 

Есть парочка дополнительных правил:

* без символов: допустима только указанная версия
* latest: последняя доступная версия

